#include <iostream>
#include <fstream>
#include <random>
#include <array>
#include <sstream>
#include <chrono>
#include <thread>
#include <mutex>

uint32_t randoms[] = { 0x308b55ce, 0x0df1414e, 0xb9edf0fe, 0x81167739, 0xf671ff05, 0xe2ff2afc, 0x18d55094, 0x28426e8e, 0x7fbe3b2d, 0xe1fefe93, 0x3357cc52, 0x6e6035b8, 0xf63ae179, 0x4649625e, 0xed3858e2, 0x57df8fca, 0xea241562, 0xc8abf80f, 0xc8046218, 0x826a1d0e, 0x7ce1b931, 0x873fb0b0, 0xdbccc638, 0x4be5a9ee, 0xfee7a14b, 0xf3025a41, 0xc0ee7570, 0xf8596e88, 0xa733cdf5, 0xbd3cfa6b, 0xe3f90050, 0x3587d7bb, 0x269f33a5, 0x27a764c0, 0x9b2c9359, 0x73c0fe96, 0x3d0d6fca, 0x1b9ba30e, 0xa5d1eaf5, 0x47894f0d, 0x2ff48266, 0x8dca8394, 0xeba89fb3, 0x6a0f03e1, 0xbedc1e4a, 0xf733e08f, 0x87793b1b, 0xe50102fb, 0x32cd7cac, 0x9b321600, 0x403c33e3, 0x4c716654, 0xdbff0799, 0x78857266, 0x58e176ae, 0xca9d556f, 0x2b5637b4, 0xba79c968, 0x1a2d8ee7, 0x90d60948, 0xce4d881b, 0x531b8669, 0x2f64fdff, 0x185935cd, 0xf07e93e4, 0x3a3c449d, 0xab13364f, 0xeda0e606, 0xc821b508, 0xd4b8802e, 0x838d3c4d, 0x6963d98e, 0x6e09de0a, 0x3f05efd4, 0x545919ab, 0x87de68da, 0x96b7e678, 0x83f45919, 0x939a37e3, 0x26bc2f76, 0xdd2e572b, 0x6f30f959, 0x2def43c8, 0xcd524cfe, 0xb4ad9f18, 0xdb6a8fb7, 0x1edfa64f, 0xe24c36a2, 0x1e5f915d, 0x157a09b0, 0xe8769f90, 0x34af8bd4, 0x3245eaf7, 0x3be6fe97, 0xc2a2edab, 0x1582767f, 0x89ef8f3e, 0x677be671, 0x5c26715c, 0xbd8d2030, 0x3fb53cf4, 0x4a1239cf, 0xaa2b126d, 0x97f42a66, 0xf5311316, 0xe5220cd9, 0x2fbf94f8, 0x74af044a, 0x50a700b7, 0xc9b61cd0, 0xff261635, 0x23d8cc6f, 0xbe89d3fb, 0x1073bb3c, 0x310ac9b9, 0xee023d1a, 0x68034ff9, 0xbb5e7285, 0x5d575fe0, 0xe0a96fd8, 0x14ecbd1f, 0x52f637c3, 0x7982fccb, 0xb44e4f25, 0x2d57f72e, 0x32f1f2a5, 0x17419f3d, 0x3fad1155, 0xba84229b, 0x8d9d00db, 0xbfc9f0b1, 0xef35a860, 0xa7af3b29, 0x39ea653e, 0xfe380fb1, 0xee4b5d63, 0x2415dc51, 0x892f0933, 0x27fcdae1, 0x7e112bc8, 0x940f5ba7, 0x8e49cc8a, 0x30f6233f, 0x78e59422, 0x699dceb9, 0x4a9198bb, 0x46b201c7, 0x62fd1497, 0xeabab9a0, 0xcd91de84, 0x51d026c3, 0x8ae4205c, 0x2b55a454, 0xc4726918, 0x9cf751f4, 0x87cadacb, 0x5dde1076, 0x44ea97ee, 0x23101b30, 0xf0f24b49, 0x26482bb4, 0x690237cd, 0xe8e1bd90, 0x5ae72482, 0x3533cc87, 0x7861cb49, 0x88c244f4, 0xa780dead, 0x66760824, 0x5eacbc4f, 0x68663668, 0x475d71ed, 0x5725dfc0, 0xaaf9d296, 0x38cae555, 0x6e1850ef, 0x32220c2f, 0x477a870a, 0x60567af7, 0x9ff9006b, 0x515abc53, 0x2acb9c7c, 0xce506ccb, 0x991b81fe, 0x16afdc12, 0x72be7ef9, 0x9a761a42, 0x43d7bbd7, 0x64f23121, 0x8ca897e8, 0x33d4cfab, 0xe3327eca, 0xb6d8ecb5, 0x735773f0, 0x6b8d5cde, 0x5cc34edd, 0xa617a66b, 0x2f103576, 0x6bb6ca90, 0x1ff34c16, 0x4f92540b, 0x2ac52252, 0x6ee23fd4, 0x44c16b87, 0x458a83b3, 0xe61d86a8, 0x164bd504, 0xbc5c0d23, 0x1a0c0f38, 0xca5a86c5, 0x39798131, 0x1ebecbf5, 0xe97ce615, 0x6bf8c039, 0x177284aa, 0x8e7a3a7f, 0xa47413db, 0xed5ea205, 0x22404d21, 0xbce6f12e, 0x559bee69, 0xa8e66e90, 0xfd8f9a3e, 0xfc8d3332, 0x1bafbcf6, 0xd8699ebd, 0xf9dcc20f, 0x36fe9b99, 0xcba47d49, 0x56e85b76, 0x1fc576b5, 0xe6f3ee6b, 0x885a9a41, 0x1a38602b, 0x7f41661e, 0x403b2cd7, 0x94407037, 0xa9c3d8d1, 0xf2193bcc, 0x4204c025, 0x66ac3d4e, 0x3d6db036, 0xdb794889, 0xca250776, 0xc7e1a904, 0xc10c0f07, 0x93941aff, 0xc16aac83, 0xdcfc5d1b, 0x8dfe2832, 0x7cd74959, 0x8abf46ab, 0xa7d1eaad, 0x438b5b14, 0xe25cbeb1, 0xa1157034, 0x9d08bf91, 0x812a27e8, 0x346c1890, 0x7a0607aa, 0x54f36cd3, 0xb101baec, 0x3e5918ce, 0x5c606c18, 0x652f17c5, 0x70809b77, 0xbfd61380, 0x8324f7ed, 0xfd26268f, 0x4cb450b4, 0xa8ddf0d0, 0xe243b0e0, 0xd6859724, 0x70ba9c34, 0x68e30e37, 0xe2a50e3e, 0xe886b941, 0xbe83b46d, 0xdc95d3cb, 0x798bbfce, 0xfac158ec, 0x35c966a6, 0x331487b6, 0x15ad87bc, 0xadf5027c, 0xd403af40, 0x15eb75f0, 0x456941cb, 0xc3aed276, 0x4b8cf43e, 0xbb4c28ac, 0x4cd1bc41, 0x8acd863a, 0xe074f6d2, 0x7eaf41e6, 0xeabb3d74, 0x2e8d1ee2, 0xf72d8faf, 0x9251a3a1, 0x77b9e82f, 0x5272cdbf, 0x81845214, 0xa1d0cdbf, 0xce89d27d, 0x4f8febce, 0xb5b4de93, 0x13996fa0, 0xae96af11, 0xc4b71390, 0x43f3cd5c, 0x33f2d6e6, 0x4cf0caf0, 0x7385bd4a, 0xc6b4ca5d, 0x5b845203, 0x8768e2cd, 0x1bcdf911, 0x1894592f, 0xbbd17240, 0x63138dd1, 0x722851e0, 0x3ff3d59e, 0x38e2e2a5, 0x84543bc3, 0xa3ffd559, 0xbc6c7e02, 0x970ed9ce, 0xb77d5784, 0x7fd18b5c, 0x9cba31de, 0xed080e76, 0x77dd970b, 0x6eca8a0b, 0x2bfe2ff7, 0xa64b6c22, 0xa96c358a, 0xaf23f88f, 0xf6629b20, 0x9e238933, 0x1f2e2ada, 0x12fbd623, 0xf4a439e3, 0x1d6fd1a2, 0x5fba6312, 0x3eea3c33, 0xf6732a25, 0x911ae84e, 0xeb6c5bf7, 0x55d2c56f, 0x788745e5, 0xc7cea98d, 0xea856af8, 0xbeb770a9, 0x3173d00d, 0x38b138fd, 0x50c3bc80, 0x5e181430, 0xba9c616e, 0xfc53d811, 0x6bdb74c5, 0x636d89d2, 0x4e56a06b, 0xcfd74f26, 0x111be57f, 0xe4bce326, 0xbaca9556, 0x6bb0bdef, 0xdbe71e5e, 0x69144d23, 0xf8bf386d, 0xaaedf1ea, 0xb37e632d, 0x4772a2a3, 0x2662cd5c, 0xf1c90d12, 0x67fbeaf7, 0xd473e495, 0xfda213f0, 0x15e30bc3, 0x3f474840, 0x798c89b7, 0x1b535950, 0xa68323f8, 0xf404cf97, 0x27052d2e, 0x2847e8d4, 0xb7dbe273, 0xd76945d0, 0xd3c25109, 0xb63b95e4, 0xebe4d21c, 0x4b9073d9, 0x607b09d4, 0xba85ba22, 0xceb6ec50, 0x1b78e7b9, 0xb9e1bfff, 0x68ebfbf1, 0x300c17bf, 0x69b2d100, 0xda013ba9, 0x10d9f2d9, 0xf8cb27ae, 0xbdf44f61, 0x7c2936b9, 0x55587a52, 0xc2c4c84e, 0xb79cc740, 0xaeb33c59, 0xb0f1fd46, 0x6a4cd9b4, 0xefc26f4d, 0xa945eec3, 0x13a79d8f, 0x72c36b83, 0x74ae71d1, 0x1e3c32fe, 0x30e04a67, 0xce697c35, 0x91d591ea, 0x31936ccb, 0x3befbdac, 0x70816a61, 0x12166465, 0xab0d6b69, 0x670210e2, 0x53daa6f5, 0xfe6c392e, 0xa13e7c7a, 0x9f82c425, 0x1455f4d4, 0xc27a3fc2, 0x292e535e, 0x6cda34f6, 0xc872aa42, 0x7f74b75f, 0x282c323d, 0x8b0c32e9, 0x1293ea75, 0x7dd77e63, 0xda03435f, 0x78ead990, 0x82e392f0, 0x82e1452e, 0x42b4d704, 0x1392f96d, 0x35d1f67a, 0x4f2a1e54, 0xe2ebcd60, 0x60140466, 0xe7c347c4, 0xdb6f6e82, 0x88f192ba, 0x6af407ac, 0x8fd352a2, 0xbe58a2bf, 0x674a8451, 0x4774ba44, 0x97e8a737, 0x8ce0429c, 0x5b47d2b0, 0x67064161, 0xb5bd0542, 0x10274d36, 0x2d1ec612, 0xd666e5ac, 0x5d0659ea, 0xa5c8bdca, 0xe412900c, 0x392e7f41, 0xda9080d5, 0x29c31659, 0xb9e5898e, 0xa79b755e, 0x62338f81, 0x5ff63703, 0x73bceba3, 0x5dd7379d, 0xd9fb11be, 0xef3a2924, 0xe7d95136, 0x6f2b1a7d, 0x9343e2fb, 0xb5151e90, 0x4a3a2b1c, 0x95955dd6, 0x8339d689, 0x81085a89, 0x46ea7a1c, 0xe37cef15, 0x63e76a30, 0xac7ae1b1, 0x29958ca3, 0x241207b0, 0xb3f9445c, 0x5efe9266, 0x93b6e51f, 0xd7e52a69, 0xa1ce3838, 0xf4e03a10, 0x3e8d4090, 0xbf5bb36c, 0xe4b38d22, 0x6cce5008, 0x84070275, 0xe354e881, 0xc528ec1e, 0x793cf4b2, 0xff87ace5, 0x2618db60, 0x663419c0, 0x27f89481, 0x97c085fb, 0xa3aa48cb, 0xa174557b, 0x30497d8d, 0xe142f41b, 0xa9f6d72d, 0xc367dfce, 0x4ebba849, 0x78305510, 0x260999c4, 0xcf5157ff, 0x13e5578c, 0x4c705d44, 0xc44a6d45, 0x22dff0d8, 0xa763f83b, 0x46f28110, 0x199a5190, 0x1b7f2733, 0xa4ff25c0, 0xec2d06e9, 0xc52c617b, 0xd1d24f6e, 0xcec4f2ee, 0x34bfa540, 0x2c4c3a17, 0xc17bbd8f, 0xe9bfcc68, 0x2d896926, 0x5044cc0f, 0x6a983586, 0x3f323718, 0xbdfb4796, 0x48975b4a, 0xce265108, 0xf72e46f9, 0x34d54cfa, 0xd1896361, 0x2dd4879c, 0xf6002db0, 0xb8677815, 0x47df772c, 0x6e465398, 0x8ec3473f, 0xf2c99014, 0x839c0fa1, 0x2fd5201e, 0xa79aec06, 0xee16bf00, 0xc2ae7bc0, 0xf2eafb57, 0xe3ecffae, 0xbd1604af, 0xe2ff0773, 0x866c031a, 0x8351a03b, 0x1dc860c6, 0x71f82307, 0x2343d802, 0x4917dae3, 0xbc420a19, 0x8ed9ef78, 0xd112b314, 0xdf7dd4ed, 0xdff19ed9, 0x1383e256, 0x391cbe44, 0xf3133ae0, 0xfe851fc1, 0x7411cefe, 0xb4e4bb1c, 0xd7e4347c, 0x8d73224c, 0xeb158e1f, 0xffd9e48c, 0xd8137d39, 0x8cd0d76a, 0x982e29d0, 0x191f9e21, 0x738e87eb, 0x34b5bf4c, 0xf24ddafc, 0xff0169da, 0x59ae1f0c, 0x45f3f079, 0x24c97d46, 0x4c765ea8, 0x93b16eb4, 0x427cda0c, 0x6805f3c6, 0x7796e504, 0x73aae585, 0x612cc183, 0x5a7a43f6, 0x21396231, 0x1b37aa0c, 0x26e30cf0, 0x70cb3178, 0x4296046f, 0x6afc77a6, 0x8eae6430, 0x1bac1e7f, 0xa9fd531d, 0xe845dbc0, 0x14f8f5ca, 0x1f6e5508, 0xde1e8b90, 0xe6a68061, 0xa535af96, 0x41129580, 0x838803ea, 0xa1a45ce2, 0xe9d12fcd, 0xe771b570, 0xacd98c49, 0x2d7c3d4e, 0xbf0cc242, 0xcbf5b6ff, 0x4cd949f3, 0x560447a3, 0x7270894f, 0x6a95339f, 0x6631b91b, 0xd843d96c, 0x51cb6a0a, 0xd1d26c48, 0x4f552203, 0x9a9a6274, 0x5dc714db, 0x108337b0, 0x76d076e7, 0x66909995, 0x13030f68, 0xb9707d81, 0xd8de5f62, 0x2947eec3, 0xb5bd6ffc, 0x50bfa2bf, 0x93586a5e, 0xb895df88, 0x6ad3dcc5, 0xcc25af3f, 0x1d6c6529, 0x44a9490e, 0x5316be9e, 0x16e96bb1, 0xbb51c7c0, 0x2bbc163f, 0x4bd61038, 0xa4d722aa, 0x3b2db59b, 0x10ff2552, 0xc835f1ce, 0xf5d57d17, 0x255dd370, 0xd27459f9, 0xcf2ec6bd, 0x96875345, 0xfc477b8f, 0xf317ffc6, 0xc966dd95, 0xf3e21c22, 0x50d4592f, 0xf1e8f6c0, 0x919f8b89, 0xc7e9483d, 0xf9d03a5f, 0xa44fcfb7, 0x2bb64772, 0x8a91ba6a, 0x9110b8e3, 0x13dc1fcd, 0x5076e85d, 0x22459a8a, 0x48058c80, 0xeb1a1b9c, 0x92df31c4, 0x8fb54cdf, 0xaa007653, 0xab7257ed, 0xc6fcb5ee, 0xc63da7e0, 0x82fbe709, 0x250b9a54, 0x128d7758, 0xfac8cf50, 0x913d2035, 0xcde44f2a, 0xccb364bc, 0x6f9558fa, 0x26f19beb, 0x430d09ed, 0x351f434b, 0x5ae7de42, 0x917b9aa1, 0x23d09319, 0x6f2da46d, 0xf03e8f5c, 0xa319979b, 0x1d3f2e9c, 0x281c4582, 0x9296221d, 0x83f186c2, 0x2192bf3e, 0xaecad604, 0x5fb03ed0, 0xb8be94cc, 0x912b06ae, 0x7fb051d8, 0xb631378a, 0x2fad78ee, 0xd210d4c9, 0xe271e574, 0x1296919b, 0xa770c803, 0x85393550, 0xd6825a38, 0xedf91a28, 0x5e65d1f7, 0xa6db64d2, 0x35e05d90, 0xcd7576b6, 0x3e18fdb2, 0x42941d80, 0xeb7f68a8, 0x39bbe800, 0xb9c37133, 0x775f6c08, 0x7daa73fe, 0xe1416ed0, 0x9b60b608, 0x10d176ac, 0xb38bf413, 0xe6efd5cf, 0x330e3407, 0x6e0130bd};

void benchmark();
void test();
void generate_state_with_seed(uint32_t * state, uint32_t seed);

std::mutex mutex;

int main() {
//    test();
//    benchmark();

    std::vector<std::thread> threads;
    const auto THREADS = 8;
    const uint64_t global_start_seed =  0xf0000000;
    const uint64_t global_end_seed =    0xffffffff;
    const auto part_size = (global_end_seed - global_start_seed + 1) / THREADS;

    std::cout << std::hex;
    for(auto i = 0; i < THREADS; i++) {
        uint32_t start_seed = global_start_seed + i * part_size;
        uint32_t end_seed = start_seed + part_size - 1;

        threads.push_back(std::thread([](uint32_t start_seed, uint32_t end_seed) {
            std::mt19937 generator;
            {
                std::lock_guard<std::mutex> lock(mutex);
                std::cout << "thread id: " << std::this_thread::get_id() << ", start seed: " << start_seed
                          << ",end seed: " << end_seed << std::endl;
            }

            for (uint32_t seed = start_seed; seed != end_seed; seed++) {
                generate_state_with_seed(generator._Ax, seed);
                uint32_t potential_disk_key = generator() ^randoms[0];

                if ((potential_disk_key & 0xff) == 0x30 && generator() == (potential_disk_key ^ randoms[1])) {
                    std::cout << "bios key: " << seed << ", disk key: " << potential_disk_key << std::endl;
                }
                if (seed % 0x01000000 == 0){
                    {
                        std::lock_guard<std::mutex> lock(mutex);
                        std::cout << "[" << std::this_thread::get_id() << "] percent done:" << (uint64_t)(seed-start_seed) * 100 / (end_seed-start_seed) << std::endl;
                    }
                }
            }
        }, start_seed, end_seed));
    }

    std::for_each(threads.begin(), threads.end(), [](std::thread &thread)
    {
        thread.join();
    });
}


void generate_state_with_seed(uint32_t * state, uint32_t seed){
    state[0] = seed;
    for(size_t index = 1; index < 624; index++)
    {
        state[index] = 6069 * state[index-1];
    }
}

void benchmark() {
    std::mt19937 generator;

    uint32_t seed = 0x4D314650;

    auto time_start = std::chrono::high_resolution_clock::now();
    auto millions_of_tries = 1;
    for (auto i = 0; i < millions_of_tries * 1000 * 1000; i++) {
        generate_state_with_seed(generator._Ax, seed);
        generator();
        generator();
    }
    auto duration = std::chrono::high_resolution_clock::now() - time_start;

    std::cout << millions_of_tries << "m tries in " << std::chrono::duration_cast<std::chrono::seconds>(duration).count() << " seconds"
              << std::endl;
}

void test(){
    std::mt19937 generator;

    generate_state_with_seed(generator._Ax, 0x4D314650);

    for(auto i = 0; i < 700; i++) generator();

    if(generator() == 0xBA8251E3){
        std::cout << "seeding still works";
    }else{
        std::cout << "SEEDING BROKEN!!!";
    }
    std::cout << std::endl;
}